
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d5  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a0  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

 unsigned char memArr[32];

 int main(void)
 {
	 MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	 MCUCSR|=(1<<JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	 
	 
	 DDRA=0XFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	 DDRB=0x00;
  8c:	17 ba       	out	0x17, r1	; 23
	 DDRC=0x00;
  8e:	14 ba       	out	0x14, r1	; 20
	 DDRD=0x00;
  90:	11 ba       	out	0x11, r1	; 17
	 // opc BH
	 // out CL
	 // zero A0


	 PORTA = 0b00000001;
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	9b bb       	out	0x1b, r25	; 27
	 PORTB = 0b11111111;
  96:	88 bb       	out	0x18, r24	; 24
	 PORTD = 0b00001111;
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	82 bb       	out	0x12, r24	; 18
	 PORTC = 0b00001111;
  9c:	85 bb       	out	0x15, r24	; 21

	 int reg1;
	 int reg2;
	 int operation;
	 int dataOutputReg = 0x00;
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f0 e0       	ldi	r31, 0x00	; 0
		 {
			 dataOutputReg = reg1 >> reg2;
		 }
		 else if (operation == j)
		 {
			 dataOutputReg = 0;
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	a1 2c       	mov	r10, r1
			 dataOutputReg = reg1 | reg2;
		 }
		 else if (operation == nor)
		 {
			 dataOutputReg = reg1 | reg2;
			 dataOutputReg = (dataOutputReg ^ 15);
  a6:	0f 2e       	mov	r0, r31
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	bf 2e       	mov	r11, r31
  ac:	f0 2d       	mov	r31, r0
		 }
		 
		 bsel = (zeroFlag&beqf)|((!zeroFlag)&bneqf);
		 
		 /*PORTC = 0x00;*/
		 unsigned char f = dataOutputReg | (bsel<<4);
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
	 int bneqf;
	 int bsel;

	 while (1)
	 {
		 operation = PIND%16;
  b2:	00 b3       	in	r16, 0x10	; 16
		 
		 reg1 = PINB%16;
  b4:	96 b3       	in	r25, 0x16	; 22
  b6:	89 2f       	mov	r24, r25
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	e8 2e       	mov	r14, r24
  bc:	f1 2c       	mov	r15, r1
		 reg2 =  (PINB >> 4);
  be:	96 b3       	in	r25, 0x16	; 22
  c0:	92 95       	swap	r25
  c2:	9f 70       	andi	r25, 0x0F	; 15
  c4:	29 2f       	mov	r18, r25
  c6:	30 e0       	ldi	r19, 0x00	; 0
		 
		 int c = PIND;
  c8:	d0 b2       	in	r13, 0x10	; 16
		 beqf = (c & 0b00010000)>>4;
  ca:	d4 fa       	bst	r13, 4
  cc:	44 27       	eor	r20, r20
  ce:	40 f9       	bld	r20, 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
		 bneqf = (c & 0b00100000)>>5;
  d2:	d5 fa       	bst	r13, 5
  d4:	66 27       	eor	r22, r22
  d6:	60 f9       	bld	r22, 0
  d8:	70 e0       	ldi	r23, 0x00	; 0

		 if (operation == add || operation ==addi || operation == lw || operation == sw)
  da:	10 2f       	mov	r17, r16
  dc:	17 70       	andi	r17, 0x07	; 7
  de:	15 30       	cpi	r17, 0x05	; 5
  e0:	21 f0       	breq	.+8      	; 0xea <main+0x6e>
  e2:	c0 2f       	mov	r28, r16
  e4:	cd 70       	andi	r28, 0x0D	; 13
  e6:	c1 30       	cpi	r28, 0x01	; 1
  e8:	69 f4       	brne	.+26     	; 0x104 <main+0x88>
		 {
			 dataOutputReg = (reg1 + reg2)%16;
  ea:	c7 01       	movw	r24, r14
  ec:	82 0f       	add	r24, r18
  ee:	93 1f       	adc	r25, r19
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	90 78       	andi	r25, 0x80	; 128
  f4:	99 23       	and	r25, r25
  f6:	24 f4       	brge	.+8      	; 0x100 <main+0x84>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	80 6f       	ori	r24, 0xF0	; 240
  fc:	9f 6f       	ori	r25, 0xFF	; 255
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	fc 01       	movw	r30, r24
 102:	5c c0       	rjmp	.+184    	; 0x1bc <main+0x140>
		 }
		 else if (operation == sub || operation == subi || operation == beq || operation == bneq)
 104:	14 30       	cpi	r17, 0x04	; 4
 106:	21 f0       	breq	.+8      	; 0x110 <main+0x94>
 108:	10 2f       	mov	r17, r16
 10a:	1b 70       	andi	r17, 0x0B	; 11
 10c:	1a 30       	cpi	r17, 0x0A	; 10
 10e:	71 f4       	brne	.+28     	; 0x12c <main+0xb0>
		 {
			 dataOutputReg = (reg1 - reg2 +16 )%16;
 110:	c7 01       	movw	r24, r14
 112:	82 1b       	sub	r24, r18
 114:	93 0b       	sbc	r25, r19
 116:	40 96       	adiw	r24, 0x10	; 16
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	90 78       	andi	r25, 0x80	; 128
 11c:	99 23       	and	r25, r25
 11e:	24 f4       	brge	.+8      	; 0x128 <main+0xac>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	80 6f       	ori	r24, 0xF0	; 240
 124:	9f 6f       	ori	r25, 0xFF	; 255
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	fc 01       	movw	r30, r24
 12a:	48 c0       	rjmp	.+144    	; 0x1bc <main+0x140>
 12c:	0f 70       	andi	r16, 0x0F	; 15
	 int bneqf;
	 int bsel;

	 while (1)
	 {
		 operation = PIND%16;
 12e:	c0 2e       	mov	r12, r16
 130:	d1 2c       	mov	r13, r1
		 else if (operation == sub || operation == subi || operation == beq || operation == bneq)
		 {
			 dataOutputReg = (reg1 - reg2 +16 )%16;
			 
		 }
		 else if (operation == and || operation == andi)
 132:	2b e0       	ldi	r18, 0x0B	; 11
 134:	c2 16       	cp	r12, r18
 136:	d1 04       	cpc	r13, r1
 138:	21 f0       	breq	.+8      	; 0x142 <main+0xc6>
 13a:	32 e0       	ldi	r19, 0x02	; 2
 13c:	c3 16       	cp	r12, r19
 13e:	d1 04       	cpc	r13, r1
 140:	21 f4       	brne	.+8      	; 0x14a <main+0xce>
		 {
			 dataOutputReg = reg1 & reg2;
 142:	98 23       	and	r25, r24
 144:	e9 2f       	mov	r30, r25
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	39 c0       	rjmp	.+114    	; 0x1bc <main+0x140>
		 }
		 else if (operation == or || operation == ori)
 14a:	20 2f       	mov	r18, r16
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	27 50       	subi	r18, 0x07	; 7
 150:	31 09       	sbc	r19, r1
 152:	22 30       	cpi	r18, 0x02	; 2
 154:	31 05       	cpc	r19, r1
 156:	20 f4       	brcc	.+8      	; 0x160 <main+0xe4>
		 {
			 dataOutputReg = reg1 | reg2;
 158:	98 2b       	or	r25, r24
 15a:	e9 2f       	mov	r30, r25
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	2e c0       	rjmp	.+92     	; 0x1bc <main+0x140>
		 }
		 else if (operation == nor)
 160:	2f e0       	ldi	r18, 0x0F	; 15
 162:	c2 16       	cp	r12, r18
 164:	d1 04       	cpc	r13, r1
 166:	29 f4       	brne	.+10     	; 0x172 <main+0xf6>
		 {
			 dataOutputReg = reg1 | reg2;
			 dataOutputReg = (dataOutputReg ^ 15);
 168:	98 2b       	or	r25, r24
 16a:	9b 25       	eor	r25, r11
 16c:	e9 2f       	mov	r30, r25
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	25 c0       	rjmp	.+74     	; 0x1bc <main+0x140>
		 }
		 else if (operation == sll)
 172:	36 e0       	ldi	r19, 0x06	; 6
 174:	c3 16       	cp	r12, r19
 176:	d1 04       	cpc	r13, r1
 178:	89 f4       	brne	.+34     	; 0x19c <main+0x120>
		 {
			 dataOutputReg = reg1 << reg2;
 17a:	97 01       	movw	r18, r14
 17c:	02 c0       	rjmp	.+4      	; 0x182 <main+0x106>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	9a 95       	dec	r25
 184:	e2 f7       	brpl	.-8      	; 0x17e <main+0x102>
 186:	c9 01       	movw	r24, r18
			 dataOutputReg%=16;
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	90 78       	andi	r25, 0x80	; 128
 18c:	99 23       	and	r25, r25
 18e:	24 f4       	brge	.+8      	; 0x198 <main+0x11c>
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	80 6f       	ori	r24, 0xF0	; 240
 194:	9f 6f       	ori	r25, 0xFF	; 255
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	fc 01       	movw	r30, r24
 19a:	10 c0       	rjmp	.+32     	; 0x1bc <main+0x140>
		 }
		 else if (operation == srl)
 19c:	c1 14       	cp	r12, r1
 19e:	d1 04       	cpc	r13, r1
 1a0:	39 f4       	brne	.+14     	; 0x1b0 <main+0x134>
		 {
			 dataOutputReg = reg1 >> reg2;
 1a2:	f7 01       	movw	r30, r14
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <main+0x12e>
 1a6:	f5 95       	asr	r31
 1a8:	e7 95       	ror	r30
 1aa:	9a 95       	dec	r25
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <main+0x12a>
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <main+0x140>
		 }
		 else if (operation == j)
 1b0:	39 e0       	ldi	r19, 0x09	; 9
 1b2:	c3 16       	cp	r12, r19
 1b4:	d1 04       	cpc	r13, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <main+0x140>
		 {
			 dataOutputReg = 0;
 1b8:	ed 2f       	mov	r30, r29
 1ba:	fa 2d       	mov	r31, r10
		 }

		 if (dataOutputReg%16 == 0)
 1bc:	7f 01       	movw	r14, r30
 1be:	8f e0       	ldi	r24, 0x0F	; 15
 1c0:	e8 22       	and	r14, r24
 1c2:	ff 24       	eor	r15, r15
		 }
		 
		 bsel = (zeroFlag&beqf)|((!zeroFlag)&bneqf);
		 
		 /*PORTC = 0x00;*/
		 unsigned char f = dataOutputReg | (bsel<<4);
 1c4:	8b 2f       	mov	r24, r27
 1c6:	9a 2f       	mov	r25, r26
 1c8:	e1 14       	cp	r14, r1
 1ca:	f1 04       	cpc	r15, r1
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <main+0x156>
 1ce:	8d 2f       	mov	r24, r29
 1d0:	9a 2d       	mov	r25, r10
 1d2:	9c 01       	movw	r18, r24
 1d4:	24 23       	and	r18, r20
 1d6:	35 23       	and	r19, r21
 1d8:	8b 2f       	mov	r24, r27
 1da:	9a 2f       	mov	r25, r26
 1dc:	ef 28       	or	r14, r15
 1de:	11 f4       	brne	.+4      	; 0x1e4 <main+0x168>
 1e0:	8d 2f       	mov	r24, r29
 1e2:	9a 2d       	mov	r25, r10
 1e4:	86 23       	and	r24, r22
 1e6:	97 23       	and	r25, r23
 1e8:	82 2b       	or	r24, r18
 1ea:	93 2b       	or	r25, r19
 1ec:	82 95       	swap	r24
 1ee:	92 95       	swap	r25
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	98 27       	eor	r25, r24
 1f4:	80 7f       	andi	r24, 0xF0	; 240
 1f6:	98 27       	eor	r25, r24
 1f8:	8e 2b       	or	r24, r30
		 PORTA = f;
 1fa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	83 ec       	ldi	r24, 0xC3	; 195
 1fe:	99 e0       	ldi	r25, 0x09	; 9
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x184>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x18a>
 206:	00 00       	nop
 208:	54 cf       	rjmp	.-344    	; 0xb2 <main+0x36>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
